/*Globales*/
:root { /*pseudoselectores para definit paleta de colores, esto se llaman custom propierties*/
    --blanco: #ffffff;
    --oscuro: #212121;
    --primario: #FFC107;
    --secundario: #0097A7;
    --gris: #757575;
    --grisClaro: #DFE9F3;
}

html {
    font-size: 62.5%;
    box-sizing: border-box; /*Hack para box model*/
}

*, *:before, *:after {
    box-sizing: inherit;
}

body {
    font-size: 16px; /*1rem = 10px*/
    font-family: 'Krub', sans-serif;
    /*Buscar fuentes en google fonts*/

    background-image: linear-gradient(to top, var(--grisClaro) 0%, var(--blanco) 100% ); /*Esto es para el degradado*/
}

.contenedor { /*Por lo regular siempre se crea un contenedor para definir los tamaños*/
    max-width: 120rem; /*1200 pixeles*/
    /*
    margin-top: 0;
    margin-right: auto;
    margin-bottom: 0;
    margin-left: auto;
    */

    /*
    margin: 0 auto 0 auto;
    Si los valores se repiten se puede dejar en una sola 0 auto x2
    */
    margin: 0 auto;
}

.boton {
    background-color: var(--secundario);
    color: var(--blanco);
    padding: 1rem 3rem;
    margin-top: 1rem;
    font-size: 2rem;
    text-decoration: none;
    text-transform: uppercase;
    font-weight: bold;
    border-radius: 0.5rem;
    width: 85%;
    text-align: center;
    border: none; /*para quitar el border del input de abajo*/
}

/*Para el submit del cuestionario*/
.boton:hover {
    cursor: pointer;
}

@media (min-width: 768px) {
   .boton {
       width: auto;
   }
}

.sombra {
    /*https://www.cssmatic.com/box-shadow*/
    box-shadow: 0px 5px 15px 0px rgba(112,112,112,0.57);

    background-color: var(--blanco);

    padding: 2rem;

    border-radius: 1rem;
}

/*Tipografia*/
h1 {
    font-size: 3.8rem;
}

h2 {
    font-size: 2.8rem;
}

h3 {
    font-size: 1.8rem;
}

h1, h2, h3 {
    text-align: center;
}

/*
Con esta conversión cuando quiera escribir
60px 6rem y se adapta mejor a todos los dispositivos.
*/

/*Titulos*/
.titulo span {
    font-size: 2rem;
}

/*h1 span {} esto aplica a los span que están dentro de un h1*/

/*
.cliente {
    color: blue; esto es una clase, se puede usar múltiples veces
}

#cliente {
    color: blue; esto es un ID solo se puede utilizar una vez por documento
}

También se pueden usar selectores para los atributos (img, h1, etc)

Combinación de descendentes
.cliente .nombre {
    color: blue; la clase nombre que esté dentro de la clase cliente recibirá el estilo
}

Aplicar la regla a todos los hijos
.cliente > p{
    color: blue; aplicará la regla para todos los parrafos que estén dentro de la clase cliente
}
*/

/*
Margin: El espacio del contenedor contra otro contenedor
Padding: El espacio interior del contenido con las orillas (bordes) del contenedor  
*/

/*Navegtación principal*/
.nav-bg {
    background-color: var(--secundario);
}

.navegacion-principal {
    /*margin-top: 10rem; /*La distancia hacia afuera con el elemento más cercano*/
    display: flex; /*Para usar flexbox solo en navacion-principal*/
    flex-direction: column;    
    align-items: center; /*Alinear verticalmente para flexdierction row*/
}

@media (min-width: 480px) { /*Todo lo que tenga como minimo 480 en adelante se verá así*/
   .navegacion-principal {
       flex-direction: row; /*Aplicará a partir de los 480px en adelante*/
       justify-content: space-between; /*Alinear horizontalmente*/
   }
}
/* https://dev.to/anirudhvarma12/flexbox-align-items-vs-align-content-3knl */
/*** TODOS LOS ESTILOS ESPECÍFICADOS EN EL MIN WIDTH SERÁN APLICADOS DE ESA MEDIDA EN ADELANTE ***/

.navegacion-principal a {
    color: var(--blanco);
    text-decoration: none;
    padding: 1rem; /*hacia adentro, hacer que cubra todo el espacio amarillo*/
    font-size: 2rem;
    font-weight: 700; /*700 o bold*/
}

.navegacion-principal a:hover {
    background-color: var(--primario);
    color: var(--oscuro);
}

.hero {
    background-image: url(../img/hero.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    height: 450px;
    /*padding: 20px;*/
    position: relative;

    margin-bottom: 2rem;

    background-attachment: fixed;
    background-position: center;
}

/*
Al padre position relative al hijo position absolute, siempre
para poder ajustar bien
Si no se hace position relative al padre, al que se le ponga position absolute
tomara como relativo todo el documento y se va a ajustar mal
*/
.contenido-hero {
    position: absolute;
    /*background-color: rgba(0, 0, 0, 0.4); /** anterior **/
    background-color: rgb(0 0 0 / 50% ); /* Nueva sintaxis para difuminar la imagen*/
    width: 100%;
    height: 100%;

    display: flex; /*para acomodar todo siempre usar display flex, a partir de aquí usar los estilos, coloca uno junto a otro*/
    flex-direction: column; /*quiero que cada palabra vaya dirigida hacia abajo*/
    align-items: center; /*centrar horizontalmente a partir de display flex EN COLUMN*/
    justify-content: center; /*centrar verticalmente a partir de display flex EN COLUMN*/

}

/*Recordar que esto es enfoque de modulos*/
.contenido-hero h2,
.contenido-hero p {
    color: var(--blanco);
}

.ubicacion {
    display: flex;
    align-items: flex-end;
}

@media (min-width: 768px) {
   /**Servicios con CSS GRID**/
   /*Cuando esté en una resolución mayor a 768 se verá en una columna de 3*/
    .servicios {
        display: grid; /*Va a tomar cada uno de los section como principales*/

        /* Define dos columnas y después el tamaño de los renglones
        grid-template-columns: 300px 300px;
        grid-template-rows: 200px 800px;
        */

        /* Estas es la misma manera, rows / columns
        grid: 200px 800px / 300px 300px
        */

        /*Como tengo 3 columnas para el 100%, las hago de 33.3%
        grid-template-columns: 33.3% 33.3% 33.3%;
        */

        /*Lo de arriba se ve feo así que se pueden usar fracciones para ser más exactos*/
        /*grid-template-columns: 1fr 1fr 1fr; y Esto se puede simplificar con repeat*/


        grid-template-columns: repeat(3, 1fr);
        /*Margin en css grid (espacio)*/
        column-gap: 1rem;
    }
}

/*
¿Dónde utilizar Flexbox y donde Grid?
Flexbox: Alinear elementos que están dentro de contenedores (Barra de navegación (logotipo y enlaces))
Grid: Para definir el layout de tu sitio web, como columnas o contenedores de elementos, como hacer secciones de cuadros etc
*/
.servicio {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.servicio h3 {
    color: var(--secundario);
    font-weight: normal; /*o 400px es lo mismo*/
}

.servicio p {
    /*Cambiar interlineado*/
    line-height: 2;
    text-align: center;
}

.servicio .iconos {
    height: 15rem;
    width: 15rem;
    background-color: var(--primario);
    border-radius: 50%;
    display: flex; /*da acceso a justify-content y align-items, por defecto se declara como flex-direction: row*/
    justify-content: space-evenly; /*alinear horizontalmente*/
    align-items: center; /*alinear verticalmente*/
}

/*contacto*/
.formulario {
    background-color: var(--gris);
    width: min(60rem, 100%); /*Utilizar el valor más pequeño*/
    /*
    Explicación width pasado
    Ese width está comparando, ¿qué es más pequeño, 600px o el 100% de la pantalla?
    por ejemplo en una pantalla de una computadora siempre será más pequeño los 600px, así que define 
    un cuadrito gris como el total, en cambio en un celular, el 100% de la pantalla será más pequeño
    a los 600% así que tomará ese valor para definir el cuadro del formulario (el color gris)
    */
    margin: 0 auto; /*para centrarlo, como no tengo display flex para usar justify-content, se usa un 0 auto*/
    padding: 2rem; /*espacio hacia adentro*/
    border-radius: 1rem;
}

.formulario fieldset {
    border: none;
}

.formulario legend {
    text-align: center;
    font-size: 1.8rem;
    text-transform: uppercase;
    font-weight: 700; /*700 o bold*/
    margin-bottom: 2rem;
    color: var(--primario);
}

.contenedor-campos {

}

.campo {
    margin-bottom: 1rem;
}

.campo label {
    color: var(--blanco);
    font-weight: bold;
    margin-bottom: 0.5rem;
    display: block; /*Cada elemento va a tomar todo el espacio disponible*/
}

.input-text {
    width: 100%;
    border: none;
    padding: 1.5rem;
    border-radius: 1.5rem;
}

.enviar .boton { /*Todo lo que tengo arriba en la clase botón lo voy a necesitar, pero si tiene de padre la clase enviar necesito un width:100%*/
    width: 100%;
}